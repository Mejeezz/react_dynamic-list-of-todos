{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectTodo","selectedTodoId","className","map","todo","id","title","completed","classNames","type","onClick","TodoFilter","value","response","setValue","setResponse","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","todoId","selectedTodos","selectedUser","useState","user","setUser","relevantTodo","find","addData","a","userId","useEffect","href","email","name","App","setTodos","setTodoId","loading","setLoading","filter","setFilter","responseFilter","setResponseFilter","caseSensitive","input","toLowerCase","includes","filteredTodos","useMemo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.19f7c16c.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number | null;\n  selectTodo: (value: number | null) => number | void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const { id, title, completed } = todo;\n\n          return (\n            <tr key={id} data-cy=\"todo\">\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames(\n                    'has-text-success', {\n                      'has-text-danger': !completed,\n                    },\n                  )}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => selectTodo(id || null)}\n                >\n                  <span className=\"icon\">\n                    {selectedTodoId === id ? (\n                      <i className=\"far fa-eye-slash\" />\n                    ) : (\n                      <i className=\"far fa-eye\" />\n                    )}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React, { ChangeEvent } from 'react';\n\ntype Props = {\n  value: string,\n  response: string\n  setValue: (value: string) => string | void,\n  setResponse: (value: string) => string | void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  value,\n  response,\n  setValue,\n  setResponse,\n}) => {\n  const handleNewValue = (event: ChangeEvent<HTMLSelectElement>) => {\n    setValue(event.target.value);\n  };\n\n  const handleNewResponse = (event: ChangeEvent<HTMLInputElement>) => {\n    setResponse(event.target.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={value}\n            onChange={handleNewValue}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={response}\n          onChange={handleNewResponse}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {\n            response && (\n              /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => setResponse('')}\n              />\n            )\n          }\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todoId: number;\n  selectedTodos: Todo[];\n  selectedUser: (value: number | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todoId,\n  selectedTodos,\n  selectedUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const relevantTodo = selectedTodos.find(todo => todo.id === todoId);\n\n  const addData = async () => {\n    if (relevantTodo) {\n      const get = await getUser(relevantTodo.userId);\n\n      setUser(get);\n    }\n  };\n\n  useEffect(() => {\n    addData();\n  }, []);\n\n  const handleReset = (): void => {\n    selectedUser(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todoId}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleReset}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {relevantTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                relevantTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n\n              {' by '}\n\n              <a href={`mailto: ${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoId, setTodoId] = useState<number | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [responseFilter, setResponseFilter] = useState('');\n\n  const addData = async () => {\n    const get = await getTodos();\n\n    setTodos(get);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    addData();\n  }, []);\n\n  const caseSensitive = (title: string, input: string) => {\n    return title.toLowerCase().includes(input.toLowerCase());\n  };\n\n  const filteredTodos = useMemo(() => {\n    switch (filter) {\n      case 'active':\n        return (todos.filter(todo => !todo.completed)\n          .filter(({ title }) => caseSensitive(title, responseFilter)));\n      case 'completed':\n        return (todos.filter(todo => todo.completed)\n          .filter(({ title }) => caseSensitive(title, responseFilter)));\n      default:\n        return (todos.filter(({ title }) => caseSensitive(title, responseFilter)));\n    }\n  }, [filter, todos, responseFilter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                value={filter}\n                response={responseFilter}\n                setValue={setFilter}\n                setResponse={setResponseFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                loading ? (\n                  <Loader />\n                ) : (\n                  <TodoList\n                    todos={filteredTodos}\n                    selectedTodoId={todoId}\n                    selectTodo={setTodoId}\n                  />\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n      {todoId && (\n        <TodoModal\n          todoId={todoId}\n          selectedTodos={todos}\n          selectedUser={setTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}